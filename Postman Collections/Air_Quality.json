{
  "info": {
    "_postman_id": "7b1e3f7d-9e98-435b-a17b-fe87c8fb8ca6",
    "name": "Air Quality",
    "description": "# Postman Air Quality Collection\n**Welcome to the Postman Air Quality Collection.**\nWelcome to the Postman Air Quality Collection. This collection was created in response to the 2017 wildfires that devastated Northern California. The fires brought tragedy, and also caused hazardous ash and smoke pollution in the surrounding areas. As Postman has an office in San Francisco, we thought it was important to help our fellow Northern Californians and the rest of the world stay aware of the air quality in their surroundings.\n\nThis collection gets air quality updates from the AccuWeather API and posts them to Twitter according to your account and location specifications. \n\n\n## Technologies Used\n1. **Postman** - This collection utilizes [Postman Collections](https://www.getpostman.com/docs/postman/collections/creating_collections), [Postman Monitors](https://www.getpostman.com/docs/postman/monitors/intro_monitors), and [Postman Environments](https://www.getpostman.com/docs/postman/environments_and_globals/manage_environments).\n\n2. **AccuWeather API** - [AccuWeather\u2019s API](https://developer.accuweather.com/home) allows users to obtain real weather data, including air quality data.\n\n  * **Using the AccuWeather API** - \n  To use AccuWeather\u2019s API you will need to create an account and obtain a trial API key from their website. You can make up to 50 calls to the API per day on the trial, which should be enough to run this collection as an individual user.\n\n3. **Twitter** - We\u2019ve chosen to use the [Twitter API](https://developer.twitter.com/en/docs/basics/getting-started)  as a platform to reach out to our community and spread the message about the state of the San Francisco air quality since the Northern California fires have started. You can configure your own Twitter account to post periodic air quality updates.\n\n  * **Using the Twitter API** - \n  To use Twitter\u2019s API, you will need to create [a Twitter app](https://apps.twitter.com/) and get OAuth credentials.\n\n## Environment Variables\nYou need to set several environment variables before this collection will run:\n\n|Environment Variable Name |Description\n|--------------------------|--------------\n|`location`                |A string describing the location you would like to monitor\n|`accuweatherApiKey`       |An [AccuWeather API key](https://developer.accuweather.com/home)\n|`twitterConsumerKey`      |[A Twitter OAuth Consumer Key](https://developer.twitter.com/en/docs/basics/getting-started)\n|`twitterConsumerSecret`   |[A Twitter OAuth Consumer Secret](https://developer.twitter.com/en/docs/basics/getting-started)\n|`twitterAccessToken`      |[A Twitter OAuth Access Token](https://developer.twitter.com/en/docs/basics/getting-started)\n|`twitterAccessSecret`     |[A Twitter OAuth Access Token Secret](https://developer.twitter.com/en/docs/basics/getting-started)",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Get Air Quality Status",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Test the response",
              "pm.test('Status code is OK', () => {",
              "    pm.response.to.be.ok;",
              "});",
              "",
              "pm.test('Response has forecast data', () => {",
              "    pm.expect(pm.response.json()).to.have.property('DailyForecasts');",
              "});",
              "",
              "try {",
              "    // Check for a non-error response code",
              "    if (pm.response.code >= 400) {",
              "        console.log(`ERROR :: ${pm.response.code} response from API.`);",
              "",
              "        throw new Error('Error response from API.');",
              "    }",
              "",
              "    // Extract the air quality data",
              "    const responseData = pm.response.json();",
              "    const airAndPollen = responseData.DailyForecasts[0].AirAndPollen;",
              "    const airQuality = airAndPollen.find(value => value.Name === 'AirQuality');",
              "    const aqValue = airQuality.Value;",
              "    const aqCategory = airQuality.Category;",
              "    const locationName = pm.globals.get('locationName');",
              "    ",
              "    // Build the Twitter status",
              "    const twitterStatus =",
              "        `The air quality index in ${locationName} is ${aqValue} (${aqCategory}).`;",
              "    ",
              "    // Log the Twitter status",
              "    console.log(`Twitter status :: ${twitterStatus}`);",
              "    ",
              "    // Assign status to a Twitter global",
              "    pm.globals.set('twitterStatus', twitterStatus);",
              "}",
              "catch (e) {",
              "    // The data probably didn't match the expected values",
              "    console.log(`ERROR :: ${e.message}`);",
              "    console.log(pm.response.text());",
              "",
              "    throw e;",
              "}",
              ""
            ],
            "id": "c2a4eb92-337a-4dc6-bdd5-f905378069c6"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Validate environment variables",
              "const pmEnvironment = pm.environment.toObject();",
              "",
              "// Check for required environment variables",
              "pm.expect(pmEnvironment).to.have.all.keys(",
              "    'location',",
              "    'accuweatherApiKey',",
              "    'twitterConsumerKey',",
              "    'twitterConsumerSecret',",
              "    'twitterAccessToken',",
              "    'twitterAccessTokenSecret'",
              ");",
              "",
              "// Get an accuweather location key",
              "const apiKey = pm.environment.get('accuweatherApiKey');",
              "const locationQuery = pm.environment.get('location');",
              "const getLocationData = `http://dataservice.accuweather.com/locations/v1/search?apikey=${apiKey}&q=${locationQuery}`;",
              "",
              "// Get and save location data from a location query string",
              "function saveLocationData (e, response) {",
              "    // Throw if we get an error",
              "    if (e) { throw e; }",
              "    ",
              "    // Handle error response",
              "    if (response.code >= 400) {",
              "        console.log(`PROBLEM :: ${response.code} error while getting location.`);",
              "        console.log(response.text());",
              "        ",
              "        // Throw",
              "        throw new Error(`Couldn\\'t get location. Check your environment's location value.`);",
              "    }",
              "    ",
              "    // Log location info and store the location information",
              "    const responseData = response.json();",
              "    ",
              "    if (responseData.length > 1) {",
              "        console.log('WARNING :: Query returned multiple results. Returning the first result.');",
              "    }",
              "    ",
              "    const [{ Key: locationKey, EnglishName: locationName }] = responseData;",
              "    ",
              "    pm.globals.set('locationKey', locationKey);",
              "    pm.globals.set('locationName', locationName);",
              "    ",
              "    console.log(`Getting air quality data for ${locationName} (AccuWeather key ${locationKey})`);",
              "}",
              "",
              "// Send the request to get location data",
              "pm.sendRequest(getLocationData, saveLocationData);"
            ],
            "id": "bfa6a73f-fd40-4208-b552-8366658c37e8"
          }
        }
      ],
      "_postman_id": "f3489edf-d4a7-4edc-9cdd-282ec336c417",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://dataservice.accuweather.com/forecasts/v1/daily/1day/{{locationKey}}.json?apikey={{accuweatherApiKey}}&details=true",
          "protocol": "http",
          "host": [
            "dataservice",
            "accuweather",
            "com"
          ],
          "path": [
            "forecasts",
            "v1",
            "daily",
            "1day",
            "{{locationKey}}.json"
          ],
          "query": [
            {
              "key": "apikey",
              "value": "{{accuweatherApiKey}}"
            },
            {
              "key": "details",
              "value": "true"
            }
          ]
        },
        "description": "Get air quality data from the [AccuWeather API](https://developer.accuweather.com/)."
      },
      "response": [
        {
          "id": "360ec26e-a735-4a06-b8ec-98db5cbe2f32",
          "name": "AccuWeather Forecast",
          "originalRequest": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://dataservice.accuweather.com/forecasts/v1/daily/1day/{{locationKey}}.json?apikey={{accuweatherApiKey}}&details=true",
              "protocol": "http",
              "host": [
                "dataservice",
                "accuweather",
                "com"
              ],
              "path": [
                "forecasts",
                "v1",
                "daily",
                "1day",
                "{{locationKey}}.json"
              ],
              "query": [
                {
                  "key": "apikey",
                  "value": "{{accuweatherApiKey}}"
                },
                {
                  "key": "details",
                  "value": "true"
                }
              ]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Accept",
              "value": "*/*",
              "name": "Accept",
              "description": ""
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "origin, x-requested-with, accept",
              "name": "Access-Control-Allow-Headers",
              "description": ""
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, PUT, POST, DELETE",
              "name": "Access-Control-Allow-Methods",
              "description": ""
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*",
              "name": "Access-Control-Allow-Origin",
              "description": ""
            },
            {
              "key": "Access-Control-Max-Age",
              "value": "3628800",
              "name": "Access-Control-Max-Age",
              "description": ""
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "name": "Cache-Control",
              "description": ""
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "name": "Connection",
              "description": ""
            },
            {
              "key": "Content-Encoding",
              "value": "gzip",
              "name": "Content-Encoding",
              "description": ""
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8",
              "name": "Content-Type",
              "description": ""
            },
            {
              "key": "Date",
              "value": "Fri, 13 Oct 2017 19:58:03 GMT",
              "name": "Date",
              "description": ""
            },
            {
              "key": "Expires",
              "value": "Fri, 13 Oct 2017 20:18:02 GMT",
              "name": "Expires",
              "description": ""
            },
            {
              "key": "Postman-Token",
              "value": "a3a18946-c1dc-4080-a677-ec16d3d60999",
              "name": "Postman-Token",
              "description": ""
            },
            {
              "key": "RateLimit-Limit",
              "value": "50",
              "name": "RateLimit-Limit",
              "description": ""
            },
            {
              "key": "RateLimit-Remaining",
              "value": "31",
              "name": "RateLimit-Remaining",
              "description": ""
            },
            {
              "key": "Server",
              "value": "Microsoft-IIS/10.0",
              "name": "Server",
              "description": ""
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.4.0",
              "name": "User-Agent",
              "description": ""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding",
              "name": "Vary",
              "description": ""
            },
            {
              "key": "X-Forwarded-For",
              "value": "204.14.158.214",
              "name": "X-Forwarded-For",
              "description": ""
            },
            {
              "key": "X-Forwarded-Port",
              "value": "80",
              "name": "X-Forwarded-Port",
              "description": ""
            },
            {
              "key": "X-Forwarded-Proto",
              "value": "http",
              "name": "X-Forwarded-Proto",
              "description": ""
            },
            {
              "key": "accept-encoding",
              "value": "gzip",
              "name": "accept-encoding",
              "description": ""
            },
            {
              "key": "accept-encoding",
              "value": "deflate",
              "name": "accept-encoding",
              "description": ""
            },
            {
              "key": "transfer-encoding",
              "value": "chunked",
              "name": "transfer-encoding",
              "description": ""
            }
          ],
          "cookie": [],
          "responseTime": null,
          "body": "{\"Headline\":{\"EffectiveDate\":\"2017-10-13T08:00:00-07:00\",\"EffectiveEpochDate\":1507906800,\"Severity\":7,\"Text\":\"Smoky today to tomorrow\",\"Category\":\"smoke\",\"EndDate\":\"2017-10-14T20:00:00-07:00\",\"EndEpochDate\":1508036400,\"MobileLink\":\"http://m.accuweather.com/en/us/san-francisco-ca/94103/extended-weather-forecast/347629?lang=en-us\",\"Link\":\"http://www.accuweather.com/en/us/san-francisco-ca/94103/daily-weather-forecast/347629?lang=en-us\"},\"DailyForecasts\":[{\"Date\":\"2017-10-13T07:00:00-07:00\",\"EpochDate\":1507903200,\"Sun\":{\"Rise\":\"2017-10-13T07:16:00-07:00\",\"EpochRise\":1507904160,\"Set\":\"2017-10-13T18:35:00-07:00\",\"EpochSet\":1507944900},\"Moon\":{\"Rise\":\"2017-10-13T00:53:00-07:00\",\"EpochRise\":1507881180,\"Set\":\"2017-10-13T15:17:00-07:00\",\"EpochSet\":1507933020,\"Phase\":\"WaningCrescent\",\"Age\":23},\"Temperature\":{\"Minimum\":{\"Value\":53.0,\"Unit\":\"F\",\"UnitType\":18},\"Maximum\":{\"Value\":68.0,\"Unit\":\"F\",\"UnitType\":18}},\"RealFeelTemperature\":{\"Minimum\":{\"Value\":50.0,\"Unit\":\"F\",\"UnitType\":18},\"Maximum\":{\"Value\":74.0,\"Unit\":\"F\",\"UnitType\":18}},\"RealFeelTemperatureShade\":{\"Minimum\":{\"Value\":50.0,\"Unit\":\"F\",\"UnitType\":18},\"Maximum\":{\"Value\":65.0,\"Unit\":\"F\",\"UnitType\":18}},\"HoursOfSun\":12.1,\"DegreeDaySummary\":{\"Heating\":{\"Value\":4.0,\"Unit\":\"F\",\"UnitType\":18},\"Cooling\":{\"Value\":0.0,\"Unit\":\"F\",\"UnitType\":18}},\"AirAndPollen\":[{\"Name\":\"AirQuality\",\"Value\":158,\"Category\":\"Unhealthy\",\"CategoryValue\":4,\"Type\":\"Particle Pollution\"},{\"Name\":\"Grass\",\"Value\":2,\"Category\":\"Low\",\"CategoryValue\":1},{\"Name\":\"Mold\",\"Value\":0,\"Category\":\"Low\",\"CategoryValue\":1},{\"Name\":\"Ragweed\",\"Value\":5,\"Category\":\"Low\",\"CategoryValue\":1},{\"Name\":\"Tree\",\"Value\":50,\"Category\":\"Moderate\",\"CategoryValue\":2},{\"Name\":\"UVIndex\",\"Value\":12,\"Category\":\"Extreme\",\"CategoryValue\":5}],\"Day\":{\"Icon\":2,\"IconPhrase\":\"Mostly sunny\",\"ShortPhrase\":\"Hazy sunshine\",\"LongPhrase\":\"Smoky with hazy sunshine; breezy this afternoon\",\"PrecipitationProbability\":0,\"ThunderstormProbability\":1,\"RainProbability\":0,\"SnowProbability\":0,\"IceProbability\":0,\"Wind\":{\"Speed\":{\"Value\":11.5,\"Unit\":\"mi/h\",\"UnitType\":9},\"Direction\":{\"Degrees\":289,\"Localized\":\"WNW\",\"English\":\"WNW\"}},\"WindGust\":{\"Speed\":{\"Value\":26.5,\"Unit\":\"mi/h\",\"UnitType\":9},\"Direction\":{\"Degrees\":299,\"Localized\":\"WNW\",\"English\":\"WNW\"}},\"TotalLiquid\":{\"Value\":0.0,\"Unit\":\"in\",\"UnitType\":1},\"Rain\":{\"Value\":0.0,\"Unit\":\"in\",\"UnitType\":1},\"Snow\":{\"Value\":0.0,\"Unit\":\"in\",\"UnitType\":1},\"Ice\":{\"Value\":0.0,\"Unit\":\"in\",\"UnitType\":1},\"HoursOfPrecipitation\":0.0,\"HoursOfRain\":0.0,\"HoursOfSnow\":0.0,\"HoursOfIce\":0.0,\"CloudCover\":21},\"Night\":{\"Icon\":33,\"IconPhrase\":\"Clear\",\"ShortPhrase\":\"Clear\",\"LongPhrase\":\"Clear\",\"PrecipitationProbability\":0,\"ThunderstormProbability\":1,\"RainProbability\":0,\"SnowProbability\":0,\"IceProbability\":0,\"Wind\":{\"Speed\":{\"Value\":5.8,\"Unit\":\"mi/h\",\"UnitType\":9},\"Direction\":{\"Degrees\":314,\"Localized\":\"NW\",\"English\":\"NW\"}},\"WindGust\":{\"Speed\":{\"Value\":17.3,\"Unit\":\"mi/h\",\"UnitType\":9},\"Direction\":{\"Degrees\":300,\"Localized\":\"WNW\",\"English\":\"WNW\"}},\"TotalLiquid\":{\"Value\":0.0,\"Unit\":\"in\",\"UnitType\":1},\"Rain\":{\"Value\":0.0,\"Unit\":\"in\",\"UnitType\":1},\"Snow\":{\"Value\":0.0,\"Unit\":\"in\",\"UnitType\":1},\"Ice\":{\"Value\":0.0,\"Unit\":\"in\",\"UnitType\":1},\"HoursOfPrecipitation\":0.0,\"HoursOfRain\":0.0,\"HoursOfSnow\":0.0,\"HoursOfIce\":0.0,\"CloudCover\":0},\"Sources\":[\"AccuWeather\"],\"MobileLink\":\"http://m.accuweather.com/en/us/san-francisco-ca/94103/daily-weather-forecast/347629?day=1&lang=en-us\",\"Link\":\"http://www.accuweather.com/en/us/san-francisco-ca/94103/daily-weather-forecast/347629?day=1&lang=en-us\"}]}"
        }
      ]
    },
    {
      "name": "Post Air Quality Status to Twitter",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Check for OK response",
              "pm.test('Status code is OK', () => {",
              "    pm.response.to.be.ok;",
              "});",
              "",
              "// Clear global state",
              "pm.globals.clear('locationKey');",
              "pm.globals.clear('locationName');",
              "pm.globals.clear('twitterStatus');"
            ],
            "id": "ad2df093-2e21-411b-a892-1e37fdddb7b2"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "",
              ""
            ],
            "id": "b56b0726-3a7d-4173-8374-ea00b731974c"
          }
        }
      ],
      "_postman_id": "c73e1863-dc44-4362-ba52-b9be7e5cc525",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "oauth1",
          "oauth1": {
            "consumerKey": "{{twitterConsumerKey}}",
            "consumerSecret": "{{twitterConsumerSecret}}",
            "token": "{{twitterAccessToken}}",
            "tokenSecret": "{{twitterAccessTokenSecret}}",
            "signatureMethod": "HMAC-SHA1",
            "timestamp": "",
            "nonce": "",
            "version": "1.0",
            "realm": "",
            "addParamsToHeader": true,
            "addEmptyParamsToSign": false
          }
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [],
          "options": {
            "formdata": {}
          }
        },
        "url": {
          "raw": "https://api.twitter.com/1.1/statuses/update.json?status={{twitterStatus}}",
          "protocol": "https",
          "host": [
            "api",
            "twitter",
            "com"
          ],
          "path": [
            "1.1",
            "statuses",
            "update.json"
          ],
          "query": [
            {
              "key": "status",
              "value": "{{twitterStatus}}"
            }
          ]
        }
      },
      "response": []
    }
  ]
}